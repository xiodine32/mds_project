<?php
/**
 * Created at: 20/04/16 11:32
 */

namespace Controllers\Main\Models;


use Controllers\Main\ControllerMain;

class ControllerIndex extends ControllerMain
{

    /**
     * Calls the controller to  return a view, with employee assured to exist.
     * @param \Request $request
     * @return \View The View to be displayed.
     */
    protected function mainCall($request)
    {
        if (!$this->employee->administrator)
            return new \Redirect("/");

        if ($this->has($request->post, "regenerate", "true"))
            $this->regenerateControllers();

        $models = $this->directoryArray(__DIR__);

        $start = strlen("Controller");
        $length = -strlen(".php");

        foreach ($models as $key => &$model) {
            if ($model == "ControllerIndex.php") {
                unset($models[$key]);
                continue;
            }
            $model = substr($model, $start, $length);
            $model = strtolower($model[0]) . substr($model, 1);
        }
        unset($model);

//        echo "<pre>";var_dump($models);echo "</pre>";
        $this->viewbag['models'] = array_values($models);

        return new \View();
    }

    public function regenerateControllers()
    {
        $this->viewbag['success'] = true;

        $path = realpath(__DIR__ . "/../../../Models/Generated");

        // get all models that were generated
        $models = $this->directoryArray($path);

        // prepare trimmers
        $start = strlen("Model");
        $length = -strlen(".php");

        foreach ($models as $model) {

            // get model database name, as stated in the convention.
            $databaseModel = substr($model, $start, $length) . "s";

            // query the database
            $data = \Database::instance()->query("DESCRIBE {$databaseModel}", [], \Database::FETCH_ALL);

            $controllerName = "Controller" . substr($model, $start, $length);

            $this->constructController($controllerName, substr($model, 0, $length), $data);

        }

    }

    /**
     * @param string $dir
     * @return array
     */
    private function directoryArray($dir)
    {
        $models = [];
        $dir = opendir($dir);
        while ($item = readdir($dir)) {
            if ($item === '.' || $item === '..')
                continue;
            $models[] = $item;
        }
        closedir($dir);
        return $models;
    }

    /**
     * @param string $controllerName
     * @param string $modelName
     * @param array[] $data
     */
    private function constructController($controllerName, $modelName, $data)
    {

        $path = __DIR__ . "/{$controllerName}.php";

        $notnulls = [];
        $nullable = [];

        foreach ($data as $item) {
            $item['Null'] = $item['Null'] === "NO" ? "false" : "true";
//            echo "<pre>";var_dump($item);echo "</pre>";

            $maxLength = "null";
            if ($start = strpos($item['Type'], "(")) {
                $maxLength = substr($item['Type'], $start + 1, -1);
                $item['Type'] = substr($item['Type'], 0, $start);
            }

            $str = "        \$this->addItem(\"{$item['Field']}\", {$item['Null']}, \"{$item['Type']}\", {$maxLength});";

            if ($item['Null'] === "false")
                $notnulls[] = $str;

            if ($item['Null'] === "true")
                $nullable[] = $str;
        }

        $notnulls = join("\n", $notnulls);
        $nullable = join("\n", $nullable);
        $date = date("d/m/Y H:i");
        file_put_contents($path, <<<HTML
<?php
/**
 * Created at: {$date}
 * Generated by ControllerIndex.php
 */

namespace Controllers\Main\Models;

use Controllers\Main\ControllerCRUD;
use Models\Generated\\{$modelName};

class {$controllerName} extends ControllerCRUD
{
    public function __construct()
    {
        // constructor
        parent::__construct(\$this, new {$modelName}());

        // not null
{$notnulls}

        // nullable
{$nullable}
    }
}
HTML
        );

    }
}